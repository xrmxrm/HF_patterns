Identify the aspects of the application that vary and separate them from what stays the same. That is, encapsulate the parts that vary, so you can alter or extend tham without affecting the parts that don't vary.

Program to an interface, not an implementation. That is, program to a supertype.

Favor composition over inheritance.

Strive for loosely coupled designs between objects that interact.


Strategy Pattern
----------------
Define a family of algorithms; encapsulate each; make them interchangeable. This lets the algorithm vary independently from the client using it.

Observer Pattern
---------------- 
Defines a one-to-many dependency between objects so that when one object changes state, all of its dependents are notified and updated automatically.